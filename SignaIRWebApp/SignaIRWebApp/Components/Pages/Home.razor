@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="SendToAll" disabled="@(!IsConnected)">Send</button>>>
<button @onclick="SendToCaller" disabled="@(!IsConnected)">Send</button>>>
<button @onclick="SendToGroup" disabled="@(!IsConnected)">Send</button>>>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", ReceiveMessage);

        await hubConnection.StartAsync();

    }

    private async Task ReceiveMessage(string user, string message)
    {
        var encodedMsg = $"{user}: {message}";
        messages.Add(encodedMsg);
        InvokeAsync(StateHasChanged);
    }

    private async Task SendToAll()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToAll", userInput, messageInput);
        }
    }
    private async Task SendToCaller()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToCaller", userInput, messageInput);
        }
    }
    private async Task SendToGroup()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessageToGroup", userInput, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}